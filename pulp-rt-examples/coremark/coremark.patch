diff -Naur coremark_v1.0_ref/core_main.c coremark_v1.0/core_main.c
--- coremark_v1.0_ref/core_main.c	2009-08-25 20:11:26.000000000 +0200
+++ coremark_v1.0/core_main.c	2018-02-09 17:31:06.526624932 +0100
@@ -291,13 +291,16 @@
 	if (time_in_secs(total_time) > 0)
 		ee_printf("Iterations/Sec   : %f\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
 #else 
-	ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
-	if (time_in_secs(total_time) > 0)
-		ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
+	ee_printf("Total time (usecs): %d\n",time_in_usecs(total_time));
+	//ee_printf("Total time (secs): %d\n",time_in_secs(total_time));
+	if (time_in_usecs(total_time) > 0)
+	//if (time_in_secs(total_time) > 0)
+		ee_printf("Iterations/Sec   : %d\n",1000000*default_num_contexts*results[0].iterations/time_in_usecs(total_time));
+		//ee_printf("Iterations/Sec   : %d\n",default_num_contexts*results[0].iterations/time_in_secs(total_time));
 #endif
 	if (time_in_secs(total_time) < 10) {
 		ee_printf("ERROR! Must execute for at least 10 secs for a valid result!\n");
-		total_errors++;
+		//total_errors++;
 	}
 
 	ee_printf("Iterations       : %lu\n",(ee_u32)default_num_contexts*results[0].iterations);
@@ -328,6 +331,20 @@
 #if defined(MEM_LOCATION) && !defined(MEM_LOCATION_UNSPEC)
 			ee_printf(" / %s",MEM_LOCATION);
 #else
+			ee_printf(" / %s",mem_name[MEM_METHOD]);
+#endif
+
+#if (MULTITHREAD>1)
+			ee_printf(" / %d:%s",default_num_contexts,PARALLEL_METHOD);
+#endif
+			ee_printf("\n");
+		}
+#else
+		if (known_id==3) {
+			ee_printf("CoreMark 1.0 : %d / %s %s",1000000*default_num_contexts*results[0].iterations/time_in_usecs(total_time),COMPILER_VERSION,COMPILER_FLAGS);
+#if defined(MEM_LOCATION) && !defined(MEM_LOCATION_UNSPEC)
+			ee_printf(" / %s",MEM_LOCATION);
+#else
 			ee_printf(" / %s",mem_name[MEM_METHOD]);
 #endif
 
diff -Naur coremark_v1.0_ref/Makefile.pulp coremark_v1.0/Makefile.pulp
--- coremark_v1.0_ref/Makefile.pulp	1970-01-01 01:00:00.000000000 +0100
+++ coremark_v1.0/Makefile.pulp	2018-02-09 17:50:25.433162962 +0100
@@ -0,0 +1,11 @@
+PULP_APP = test
+PULP_APP_SRCS = core_list_join.c core_main.c core_matrix.c core_state.c core_util.c
+
+PULP_APP_SRCS += pulp/core_portme.c 
+PULP_CFLAGS +=  -I$(CURDIR) -I$(CURDIR)/pulp
+PULP_CFLAGS += -DITERATIONS=1
+PULP_CFLAGS += -O3 -falign-functions=16 -funroll-all-loops
+PULP_CFLAGS += -DFLAGS_STR="\"NOT IMPLEMENTED\"" -DCLOCKS_PER_SEC=100000000 -DMULTITHREAD=1 -DCOMPILER_VERSION="\"na\"" -DCOMPILER_FLAGS="\"na\""
+
+include $(PULP_SDK_HOME)/install/rules/pulp_rt.mk
+
diff -Naur coremark_v1.0_ref/pulp/core_portme.c coremark_v1.0/pulp/core_portme.c
--- coremark_v1.0_ref/pulp/core_portme.c	1970-01-01 01:00:00.000000000 +0100
+++ coremark_v1.0/pulp/core_portme.c	2018-02-09 17:15:23.063815180 +0100
@@ -0,0 +1,134 @@
+/* 
+  File : core_portme.c
+*/
+/*
+  Author : Shay Gal-On, EEMBC
+  Legal : TODO!
+*/ 
+#include <stdio.h>
+#include <stdlib.h>
+#include "coremark.h"
+
+#if defined(VALIDATION_RUN) && VALIDATION_RUN == 1
+  volatile ee_s32 seed1_volatile=0x3415;
+  volatile ee_s32 seed2_volatile=0x3415;
+  volatile ee_s32 seed3_volatile=0x66;
+#endif
+#if defined(PERFORMANCE_RUN) && PERFORMANCE_RUN == 1
+  volatile ee_s32 seed1_volatile=0x0;
+  volatile ee_s32 seed2_volatile=0x0;
+  volatile ee_s32 seed3_volatile=0x66;
+#endif
+#if defined(PROFILE_RUN) && PROFILE_RUN == 1
+  volatile ee_s32 seed1_volatile=0x8;
+  volatile ee_s32 seed2_volatile=0x8;
+  volatile ee_s32 seed3_volatile=0x8;
+#endif
+  volatile ee_s32 seed4_volatile=ITERATIONS;
+  volatile ee_s32 seed5_volatile=0;
+/* Porting : Timing functions
+  How to capture time and convert to seconds must be ported to whatever is supported by the platform.
+  e.g. Read value from on board RTC, read value from cpu clock cycles performance counter etc. 
+  Sample implementation for standard time.h and windows.h definitions included.
+*/
+/* Define : TIMER_RES_DIVIDER
+  Divider to trade off timer resolution and total time that can be measured.
+
+  Use lower values to increase resolution, but make sure that overflow does not occur.
+  If there are issues with the return value overflowing, increase this value.
+  */
+
+rt_perf_t pulp_perf;
+
+#define NSECS_PER_SEC CLOCKS_PER_SEC
+#define CORETIMETYPE clock_t 
+#define GETMYTIME(_t) (*_t=rt_perf_read(RT_PERF_ACTIVE_CYCLES))
+#define MYTIMEDIFF(fin,ini) ((fin)-(ini))
+#define TIMER_RES_DIVIDER 1
+#define SAMPLE_TIME_IMPLEMENTATION 1
+#define EE_TICKS_PER_SEC (NSECS_PER_SEC / TIMER_RES_DIVIDER)
+
+/** Define Host specific (POSIX), or target specific global time variables. */
+static CORETIMETYPE start_time_val, stop_time_val;
+
+/* Function : start_time
+  This function will be called right before starting the timed portion of the benchmark.
+
+  Implementation may be capturing a system timer (as implemented in the example code) 
+  or zeroing some system parameters - e.g. setting the cpu clocks cycles to 0.
+*/
+void start_time(void) {
+  GETMYTIME(&start_time_val );      
+}
+/* Function : stop_time
+  This function will be called right after ending the timed portion of the benchmark.
+
+  Implementation may be capturing a system timer (as implemented in the example code) 
+  or other system parameters - e.g. reading the current value of cpu cycles counter.
+*/
+void stop_time(void) {
+  GETMYTIME(&stop_time_val );      
+}
+/* Function : time_in_secs
+  Convert the value returned by get_time to seconds.
+
+  The <secs_ret> type is used to accomodate systems with no support for floating point.
+  Default implementation implemented by the EE_TICKS_PER_SEC macro above.
+*/
+secs_ret time_in_secs(CORE_TICKS ticks) {
+  secs_ret retval=((secs_ret)ticks) / (secs_ret)EE_TICKS_PER_SEC;
+  return retval;
+}
+
+CORE_TICKS get_time(void) {
+        CORE_TICKS elapsed=(CORE_TICKS)(MYTIMEDIFF(stop_time_val, start_time_val));
+        return elapsed;
+}
+
+/* Function : time_in_secs
+  Convert the value returned by get_time to seconds.
+
+  The <secs_ret> type is used to accomodate systems with no support for floating point.
+  Default implementation implemented by the EE_TICKS_PER_SEC macro above.
+*/
+secs_ret time_in_usecs(CORE_TICKS ticks) {
+  secs_ret retval= (secs_ret)(1000000 * (float)ticks / EE_TICKS_PER_SEC);
+  return retval;
+}
+
+ee_u32 default_num_contexts=MULTITHREAD;
+
+/* Function : portable_init
+  Target specific initialization code 
+  Test for some common mistakes.
+*/
+void portable_init(core_portable *p, int *argc, char *argv[])
+{
+  rt_perf_init(&pulp_perf);
+  rt_perf_conf(&pulp_perf, 1<<RT_PERF_ACTIVE_CYCLES);
+  rt_perf_reset(&pulp_perf);
+  rt_perf_start(&pulp_perf);
+
+  if (sizeof(ee_ptr_int) != sizeof(ee_u8 *)) {
+    ee_printf("ERROR! Please define ee_ptr_int to a type that holds a pointer!\n");
+  }
+  if (sizeof(ee_u32) != 4) {
+    ee_printf("ERROR! Please define ee_u32 to a 32b unsigned type!\n");
+  }
+  p->portable_id=1;
+}
+/* Function : portable_fini
+  Target specific final code 
+*/
+void portable_fini(core_portable *p)
+{
+  p->portable_id=0;
+}
+
+ee_u8 core_start_parallel(core_results *res) {
+  iterate(res);
+  return 0;
+}
+ee_u8 core_stop_parallel(core_results *res) {
+  return 0;
+}
diff -Naur coremark_v1.0_ref/pulp/core_portme.h coremark_v1.0/pulp/core_portme.h
--- coremark_v1.0_ref/pulp/core_portme.h	1970-01-01 01:00:00.000000000 +0100
+++ coremark_v1.0/pulp/core_portme.h	2018-02-09 17:29:36.274738787 +0100
@@ -0,0 +1,191 @@
+/* File : core_portme.h */
+
+/*
+	Author : Shay Gal-On, EEMBC
+	Legal : TODO!
+*/ 
+/* Topic : Description
+	This file contains configuration constants required to execute on different platforms
+*/
+#ifndef CORE_PORTME_H
+#define CORE_PORTME_H
+
+#include <stddef.h>
+#include <rt/rt_api.h>
+
+/************************/
+/* Data types and settings */
+/************************/
+/* Configuration : HAS_FLOAT 
+	Define to 1 if the platform supports floating point.
+*/
+#ifndef HAS_FLOAT 
+#define HAS_FLOAT 0
+#endif
+/* Configuration : HAS_TIME_H
+	Define to 1 if platform has the time.h header file,
+	and implementation of functions thereof.
+*/
+#ifndef HAS_TIME_H
+#define HAS_TIME_H 0
+#endif
+/* Configuration : USE_CLOCK
+	Define to 1 if platform has the time.h header file,
+	and implementation of functions thereof.
+*/
+#ifndef USE_CLOCK
+#define USE_CLOCK 0
+#endif
+/* Configuration : HAS_STDIO
+	Define to 1 if the platform has stdio.h.
+*/
+#ifndef HAS_STDIO
+#define HAS_STDIO 0
+#endif
+/* Configuration : HAS_PRINTF
+	Define to 1 if the platform has stdio.h and implements the printf function.
+*/
+#ifndef HAS_PRINTF
+#define HAS_PRINTF 1
+#endif
+
+/* Configuration : CORE_TICKS
+	Define type of return from the timing functions.
+ */
+
+typedef int clock_t;
+typedef clock_t CORE_TICKS;
+#ifndef CLOCKS_PER_SEC
+#define CLOCKS_PER_SEC 50000000
+#endif
+
+/* Definitions : COMPILER_VERSION, COMPILER_FLAGS, MEM_LOCATION
+	Initialize these strings per platform
+*/
+#ifndef COMPILER_VERSION 
+ #ifdef __GNUC__
+ #define COMPILER_VERSION "GCC"__VERSION__
+ #else
+ #define COMPILER_VERSION "Please put compiler version here (e.g. gcc 4.1)"
+ #endif
+#endif
+#ifndef COMPILER_FLAGS 
+ #define COMPILER_FLAGS FLAGS_STR /* "Please put compiler flags here (e.g. -o3)" */
+#endif
+
+/* Data Types :
+	To avoid compiler issues, define the data types that need ot be used for 8b, 16b and 32b in <core_portme.h>.
+	
+	*Imprtant* :
+	ee_ptr_int needs to be the data type used to hold pointers, otherwise coremark may fail!!!
+*/
+typedef signed short ee_s16;
+typedef unsigned short ee_u16;
+typedef signed int ee_s32;
+typedef double ee_f32;
+typedef unsigned char ee_u8;
+typedef unsigned int ee_u32;
+typedef ee_u32 ee_ptr_int;
+typedef size_t ee_size_t;
+/* align_mem :
+	This macro is used to align an offset to point to a 32b value. It is used in the Matrix algorithm to initialize the input memory blocks.
+*/
+#define align_mem(x) (void *)(4 + (((ee_ptr_int)(x) - 1) & ~3))
+
+/* Configuration : SEED_METHOD
+	Defines method to get seed values that cannot be computed at compile time.
+	
+	Valid values :
+	SEED_ARG - from command line.
+	SEED_FUNC - from a system function.
+	SEED_VOLATILE - from volatile variables.
+*/
+#ifndef SEED_METHOD
+#define SEED_METHOD SEED_VOLATILE
+#endif
+
+/* Configuration : MEM_METHOD
+	Defines method to get a block of memry.
+	
+	Valid values :
+	MEM_MALLOC - for platforms that implement malloc and have malloc.h.
+	MEM_STATIC - to use a static memory array.
+	MEM_STACK - to allocate the data block on the stack (NYI).
+*/
+#ifndef MEM_METHOD
+#define MEM_METHOD MEM_STATIC
+#define MEM_LOCATION "STATIC"
+#endif
+
+/* Configuration : MULTITHREAD
+	Define for parallel execution 
+	
+	Valid values :
+	1 - only one context (default).
+	N>1 - will execute N copies in parallel.
+	
+	Note : 
+	If this flag is defined to more then 1, an implementation for launching parallel contexts must be defined.
+	
+	Two sample implementations are provided. Use <USE_PTHREAD> or <USE_FORK> to enable them.
+	
+	It is valid to have a different implementation of <core_start_parallel> and <core_end_parallel> in <core_portme.c>,
+	to fit a particular architecture. 
+*/
+#ifndef MULTITHREAD
+#define MULTITHREAD 1
+#endif
+
+#define PARALLEL_METHOD "PULP"
+
+/* Configuration : MAIN_HAS_NOARGC
+	Needed if platform does not support getting arguments to main. 
+	
+	Valid values :
+	0 - argc/argv to main is supported
+	1 - argc/argv to main is not supported
+	
+	Note : 
+	This flag only matters if MULTITHREAD has been defined to a value greater then 1.
+*/
+#ifndef MAIN_HAS_NOARGC 
+#define MAIN_HAS_NOARGC 1
+#endif
+
+/* Configuration : MAIN_HAS_NORETURN
+	Needed if platform does not support returning a value from main. 
+	
+	Valid values :
+	0 - main returns an int, and return value will be 0.
+	1 - platform does not support returning a value from main
+*/
+#ifndef MAIN_HAS_NORETURN
+#define MAIN_HAS_NORETURN 0
+#endif
+
+/* Variable : default_num_contexts
+	Not used for this simple port, must cintain the value 1.
+*/
+extern ee_u32 default_num_contexts;
+
+typedef struct CORE_PORTABLE_S {
+	ee_u8	portable_id;
+} core_portable;
+
+/* target specific init/fini */
+void portable_init(core_portable *p, int *argc, char *argv[]);
+void portable_fini(core_portable *p);
+
+#if !defined(PROFILE_RUN) && !defined(PERFORMANCE_RUN) && !defined(VALIDATION_RUN)
+#if (TOTAL_DATA_SIZE==1200)
+#define PROFILE_RUN 1
+#elif (TOTAL_DATA_SIZE==2000)
+#define PERFORMANCE_RUN 1
+#else
+#define VALIDATION_RUN 1
+#endif
+#endif
+
+#define ee_printf printf
+
+#endif /* CORE_PORTME_H */
